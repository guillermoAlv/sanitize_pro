// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ueaamJQPez7AwMHobw3iwx
// Component: 7cGvmDZZ5whi_
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import BackButton from "../../BackButton"; // plasmic-import: qiQc2iIfG79iX/component
import ForwardButton from "../../ForwardButton"; // plasmic-import: kRzcWJyrXSTmv/component

import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_sanitize.module.css"; // plasmic-import: ueaamJQPez7AwMHobw3iwx/projectcss
import sty from "./PlasmicEventSelector.module.css"; // plasmic-import: 7cGvmDZZ5whi_/css

export type PlasmicEventSelector__VariantMembers = {};
export type PlasmicEventSelector__VariantsArgs = {};
type VariantPropType = keyof PlasmicEventSelector__VariantsArgs;
export const PlasmicEventSelector__VariantProps = new Array<VariantPropType>();

export type PlasmicEventSelector__ArgsType = {};
type ArgPropType = keyof PlasmicEventSelector__ArgsType;
export const PlasmicEventSelector__ArgProps = new Array<ArgPropType>();

export type PlasmicEventSelector__OverridesType = {
  buttonContainer?: p.Flex<"div">;
  backButton?: p.Flex<typeof BackButton>;
  forwardButton?: p.Flex<typeof ForwardButton>;
};

export interface DefaultEventSelectorProps {
  className?: string;
}

function PlasmicEventSelector__RenderFunc(props: {
  variants: PlasmicEventSelector__VariantsArgs;
  args: PlasmicEventSelector__ArgsType;
  overrides: PlasmicEventSelector__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"buttonContainer"}
      data-plasmic-override={overrides.buttonContainer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.buttonContainer
      )}
    >
      <BackButton
        data-plasmic-name={"backButton"}
        data-plasmic-override={overrides.backButton}
        className={classNames("__wab_instance", sty.backButton)}
      />

      <ForwardButton
        data-plasmic-name={"forwardButton"}
        data-plasmic-override={overrides.forwardButton}
        className={classNames("__wab_instance", sty.forwardButton)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  buttonContainer: ["buttonContainer", "backButton", "forwardButton"],
  backButton: ["backButton"],
  forwardButton: ["forwardButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  buttonContainer: "div";
  backButton: typeof BackButton;
  forwardButton: typeof ForwardButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEventSelector__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEventSelector__VariantsArgs;
    args?: PlasmicEventSelector__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEventSelector__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEventSelector__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEventSelector__ArgProps,
      internalVariantPropNames: PlasmicEventSelector__VariantProps
    });

    return PlasmicEventSelector__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "buttonContainer") {
    func.displayName = "PlasmicEventSelector";
  } else {
    func.displayName = `PlasmicEventSelector.${nodeName}`;
  }
  return func;
}

export const PlasmicEventSelector = Object.assign(
  // Top-level PlasmicEventSelector renders the root element
  makeNodeComponent("buttonContainer"),
  {
    // Helper components rendering sub-elements
    backButton: makeNodeComponent("backButton"),
    forwardButton: makeNodeComponent("forwardButton"),

    // Metadata about props expected for PlasmicEventSelector
    internalVariantProps: PlasmicEventSelector__VariantProps,
    internalArgProps: PlasmicEventSelector__ArgProps
  }
);

export default PlasmicEventSelector;
/* prettier-ignore-end */

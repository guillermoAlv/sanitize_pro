// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ueaamJQPez7AwMHobw3iwx
// Component: qiQc2iIfG79iX
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_sanitize.module.css"; // plasmic-import: ueaamJQPez7AwMHobw3iwx/projectcss
import sty from "./PlasmicBackButton.module.css"; // plasmic-import: qiQc2iIfG79iX/css

import backIconpngMe3UrrU1OzIo5 from "./images/backIconpng.png"; // plasmic-import: ME3urrU1OZIo5/picture

export type PlasmicBackButton__VariantMembers = {};
export type PlasmicBackButton__VariantsArgs = {};
type VariantPropType = keyof PlasmicBackButton__VariantsArgs;
export const PlasmicBackButton__VariantProps = new Array<VariantPropType>();

export type PlasmicBackButton__ArgsType = {};
type ArgPropType = keyof PlasmicBackButton__ArgsType;
export const PlasmicBackButton__ArgProps = new Array<ArgPropType>();

export type PlasmicBackButton__OverridesType = {
  backButton?: p.Flex<"div">;
  img?: p.Flex<"img">;
};

export interface DefaultBackButtonProps {
  className?: string;
}

function PlasmicBackButton__RenderFunc(props: {
  variants: PlasmicBackButton__VariantsArgs;
  args: PlasmicBackButton__ArgsType;
  overrides: PlasmicBackButton__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"backButton"}
      data-plasmic-override={overrides.backButton}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.backButton
      )}
    >
      <img
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(defaultcss.img, sty.img)}
        role={"img"}
        src={backIconpngMe3UrrU1OzIo5}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  backButton: ["backButton", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  backButton: "div";
  img: "img";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBackButton__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBackButton__VariantsArgs;
    args?: PlasmicBackButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBackButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBackButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBackButton__ArgProps,
      internalVariantPropNames: PlasmicBackButton__VariantProps
    });

    return PlasmicBackButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "backButton") {
    func.displayName = "PlasmicBackButton";
  } else {
    func.displayName = `PlasmicBackButton.${nodeName}`;
  }
  return func;
}

export const PlasmicBackButton = Object.assign(
  // Top-level PlasmicBackButton renders the root element
  makeNodeComponent("backButton"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicBackButton
    internalVariantProps: PlasmicBackButton__VariantProps,
    internalArgProps: PlasmicBackButton__ArgProps
  }
);

export default PlasmicBackButton;
/* prettier-ignore-end */

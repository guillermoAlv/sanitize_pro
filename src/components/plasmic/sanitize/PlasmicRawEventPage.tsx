// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ueaamJQPez7AwMHobw3iwx
// Component: g4xPIxPvwR3QX
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HeaderButton from "../../HeaderButton"; // plasmic-import: CqpC71myoRuHP/component
import FieldContainer from "../../FieldContainer"; // plasmic-import: 5v1zNWCEOkzaG/component
import EventSelector from "../../EventSelector"; // plasmic-import: 7cGvmDZZ5whi_/component

import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_sanitize.module.css"; // plasmic-import: ueaamJQPez7AwMHobw3iwx/projectcss
import sty from "./PlasmicRawEventPage.module.css"; // plasmic-import: g4xPIxPvwR3QX/css

import titleIconpngRmip2PVvxrrVn from "./images/titleIconpng.png"; // plasmic-import: RMIP2pVVXRRVn/picture
import descriptionIconpng97R0GJdDn1Cyb from "./images/descriptionIconpng.png"; // plasmic-import: 97r0gJdDN1Cyb/picture
import categoryIconpngQjgmX81F50Huk from "./images/categoryIconpng.png"; // plasmic-import: qjgmX81F50HUK/picture
import datesIconpngOaQiWmuUpzVrF from "./images/datesIconpng.png"; // plasmic-import: OaQIWmuUpzVrF/picture
import locationIconpng96Y0VCwqq9Mjm from "./images/locationIconpng.png"; // plasmic-import: 96y0vCwqq9Mjm/picture
import agesIconpng4RqJq4WZnadIy from "./images/agesIconpng.png"; // plasmic-import: 4rqJq4WZnadIy/picture
import pricesIconpngSWixJUx0Isn28 from "./images/pricesIconpng.png"; // plasmic-import: sWixJUx0ISN28/picture
import image10PngT5PBg61Oj4E87 from "./images/image10Png.png"; // plasmic-import: T5pBg61OJ4E87/picture
import image12PngGlYDexQwIvJg from "./images/image12Png.png"; // plasmic-import: _glYDexQWIvJG/picture

export type PlasmicRawEventPage__VariantMembers = {};
export type PlasmicRawEventPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicRawEventPage__VariantsArgs;
export const PlasmicRawEventPage__VariantProps = new Array<VariantPropType>();

export type PlasmicRawEventPage__ArgsType = {};
type ArgPropType = keyof PlasmicRawEventPage__ArgsType;
export const PlasmicRawEventPage__ArgProps = new Array<ArgPropType>();

export type PlasmicRawEventPage__OverridesType = {
  root?: p.Flex<"div">;
  headerFilled?: p.Flex<"div">;
  headerFilledTitle?: p.Flex<"div">;
  fieldTitle?: p.Flex<"div">;
  titleFieldContainer?: p.Flex<typeof FieldContainer>;
  fieldDescription?: p.Flex<"div">;
  descriptionFieldContainer?: p.Flex<typeof FieldContainer>;
  fieldCategories?: p.Flex<"div">;
  categoriesFieldContainer?: p.Flex<typeof FieldContainer>;
  fieldDates?: p.Flex<"div">;
  datesFieldContainer?: p.Flex<typeof FieldContainer>;
  fieldLocation?: p.Flex<"div">;
  locationFieldContainer?: p.Flex<typeof FieldContainer>;
  fieldAges?: p.Flex<"div">;
  fieldPrices?: p.Flex<"div">;
  pricesFieldContainer?: p.Flex<typeof FieldContainer>;
  buttonsFieldContainer?: p.Flex<"div">;
  eventSelector?: p.Flex<typeof EventSelector>;
  featuredImageFieldContainer?: p.Flex<typeof FieldContainer>;
};

export interface DefaultRawEventPageProps {
  className?: string;
}

function PlasmicRawEventPage__RenderFunc(props: {
  variants: PlasmicRawEventPage__VariantsArgs;
  args: PlasmicRawEventPage__ArgsType;
  overrides: PlasmicRawEventPage__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.box__jYyFe)}>
        <div className={classNames(defaultcss.all, sty.box__ikyvE)}>
          <div
            data-plasmic-name={"headerFilled"}
            data-plasmic-override={overrides.headerFilled}
            className={classNames(defaultcss.all, sty.headerFilled)}
          >
            <div
              data-plasmic-name={"headerFilledTitle"}
              data-plasmic-override={overrides.headerFilledTitle}
              className={classNames(defaultcss.all, sty.headerFilledTitle)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__exWag
                )}
              >
                {"Events manager"}
              </div>
            </div>

            <div className={classNames(defaultcss.all, sty.box___7V9Ur)}>
              <div className={classNames(defaultcss.all, sty.box__aeiH3)}>
                <div className={classNames(defaultcss.all, sty.box__fKXf)}>
                  <HeaderButton
                    className={classNames(
                      "__wab_instance",
                      sty.headerButton__gGHh
                    )}
                  >
                    {"Raw Event Viewer"}
                  </HeaderButton>
                </div>
              </div>

              <div className={classNames(defaultcss.all, sty.box___4KZO)}>
                <div className={classNames(defaultcss.all, sty.box__rnh2J)}>
                  <HeaderButton
                    className={classNames(
                      "__wab_instance",
                      sty.headerButton__odHpC
                    )}
                  >
                    {"Event Enrichment"}
                  </HeaderButton>
                </div>
              </div>

              <div className={classNames(defaultcss.all, sty.box__tt40K)}>
                <div className={classNames(defaultcss.all, sty.box__kAgo)}>
                  <HeaderButton
                    className={classNames(
                      "__wab_instance",
                      sty.headerButton___8Xuuz
                    )}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__oqeRj
                      )}
                    >
                      {"Event Splitter by vertical"}
                    </div>
                  </HeaderButton>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className={classNames(defaultcss.all, sty.box__jd5Tf)}>
          <div className={classNames(defaultcss.all, sty.box__vUykW)}>
            <div className={classNames(defaultcss.all, sty.box__fG5S4)}>
              <div
                data-plasmic-name={"fieldTitle"}
                data-plasmic-override={overrides.fieldTitle}
                className={classNames(defaultcss.all, sty.fieldTitle)}
              >
                <FieldContainer
                  data-plasmic-name={"titleFieldContainer"}
                  data-plasmic-override={overrides.titleFieldContainer}
                  className={classNames(
                    "__wab_instance",
                    sty.titleFieldContainer
                  )}
                  iconBox={
                    <img
                      alt={""}
                      className={classNames(defaultcss.img, sty.img__jnd97)}
                      role={"img"}
                      src={titleIconpngRmip2PVvxrrVn}
                    />
                  }
                />
              </div>

              <div
                data-plasmic-name={"fieldDescription"}
                data-plasmic-override={overrides.fieldDescription}
                className={classNames(defaultcss.all, sty.fieldDescription)}
              >
                <FieldContainer
                  data-plasmic-name={"descriptionFieldContainer"}
                  data-plasmic-override={overrides.descriptionFieldContainer}
                  className={classNames(
                    "__wab_instance",
                    sty.descriptionFieldContainer
                  )}
                  iconBox={
                    <img
                      alt={""}
                      className={classNames(defaultcss.img, sty.img__esHS)}
                      role={"img"}
                      src={descriptionIconpng97R0GJdDn1Cyb}
                    />
                  }
                />
              </div>
            </div>

            <div className={classNames(defaultcss.all, sty.box___8N7Lv)}>
              <div className={classNames(defaultcss.all, sty.box__hGZtp)}>
                <div
                  data-plasmic-name={"fieldCategories"}
                  data-plasmic-override={overrides.fieldCategories}
                  className={classNames(defaultcss.all, sty.fieldCategories)}
                >
                  <FieldContainer
                    data-plasmic-name={"categoriesFieldContainer"}
                    data-plasmic-override={overrides.categoriesFieldContainer}
                    className={classNames(
                      "__wab_instance",
                      sty.categoriesFieldContainer
                    )}
                    iconBox={
                      <img
                        alt={""}
                        className={classNames(defaultcss.img, sty.img__xgy7A)}
                        role={"img"}
                        src={categoryIconpngQjgmX81F50Huk}
                      />
                    }
                  />
                </div>

                <div
                  data-plasmic-name={"fieldDates"}
                  data-plasmic-override={overrides.fieldDates}
                  className={classNames(defaultcss.all, sty.fieldDates)}
                >
                  <FieldContainer
                    data-plasmic-name={"datesFieldContainer"}
                    data-plasmic-override={overrides.datesFieldContainer}
                    className={classNames(
                      "__wab_instance",
                      sty.datesFieldContainer
                    )}
                    iconBox={
                      <img
                        alt={""}
                        className={classNames(defaultcss.img, sty.img__kvJ8)}
                        role={"img"}
                        src={datesIconpngOaQiWmuUpzVrF}
                      />
                    }
                  />
                </div>
              </div>

              <div
                data-plasmic-name={"fieldLocation"}
                data-plasmic-override={overrides.fieldLocation}
                className={classNames(defaultcss.all, sty.fieldLocation)}
              >
                <FieldContainer
                  data-plasmic-name={"locationFieldContainer"}
                  data-plasmic-override={overrides.locationFieldContainer}
                  className={classNames(
                    "__wab_instance",
                    sty.locationFieldContainer
                  )}
                  iconBox={
                    <img
                      alt={""}
                      className={classNames(defaultcss.img, sty.img__hsWWq)}
                      role={"img"}
                      src={locationIconpng96Y0VCwqq9Mjm}
                    />
                  }
                />
              </div>

              <div className={classNames(defaultcss.all, sty.box__br1S)}>
                <div
                  data-plasmic-name={"fieldAges"}
                  data-plasmic-override={overrides.fieldAges}
                  className={classNames(defaultcss.all, sty.fieldAges)}
                >
                  <FieldContainer
                    className={classNames(
                      "__wab_instance",
                      sty.fieldContainer__f9Cj6
                    )}
                    iconBox={
                      <img
                        alt={""}
                        className={classNames(defaultcss.img, sty.img__zRu4U)}
                        role={"img"}
                        src={agesIconpng4RqJq4WZnadIy}
                      />
                    }
                  />
                </div>

                <div
                  data-plasmic-name={"fieldPrices"}
                  data-plasmic-override={overrides.fieldPrices}
                  className={classNames(defaultcss.all, sty.fieldPrices)}
                >
                  <FieldContainer
                    data-plasmic-name={"pricesFieldContainer"}
                    data-plasmic-override={overrides.pricesFieldContainer}
                    className={classNames(
                      "__wab_instance",
                      sty.pricesFieldContainer
                    )}
                    iconBox={
                      <img
                        alt={""}
                        className={classNames(defaultcss.img, sty.img__jJbW)}
                        role={"img"}
                        src={pricesIconpngSWixJUx0Isn28}
                      />
                    }
                  />
                </div>
              </div>
            </div>
          </div>

          <div className={classNames(defaultcss.all, sty.box__xUm0L)}>
            <div
              data-plasmic-name={"buttonsFieldContainer"}
              data-plasmic-override={overrides.buttonsFieldContainer}
              className={classNames(defaultcss.all, sty.buttonsFieldContainer)}
            >
              <EventSelector
                data-plasmic-name={"eventSelector"}
                data-plasmic-override={overrides.eventSelector}
                className={classNames("__wab_instance", sty.eventSelector)}
              />
            </div>

            <div className={classNames(defaultcss.all, sty.box__wzSpK)}>
              <FieldContainer
                data-plasmic-name={"featuredImageFieldContainer"}
                data-plasmic-override={overrides.featuredImageFieldContainer}
                className={classNames(
                  "__wab_instance",
                  sty.featuredImageFieldContainer
                )}
                iconBox={
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__r9Vp)}
                    role={"img"}
                    src={image10PngT5PBg61Oj4E87}
                  />
                }
              />
            </div>

            <div className={classNames(defaultcss.all, sty.box___5Tfb4)}>
              <FieldContainer
                className={classNames(
                  "__wab_instance",
                  sty.fieldContainer__ewi3D
                )}
                iconBox={
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__s2Myp)}
                    role={"img"}
                    src={image12PngGlYDexQwIvJg}
                  />
                }
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerFilled",
    "headerFilledTitle",
    "fieldTitle",
    "titleFieldContainer",
    "fieldDescription",
    "descriptionFieldContainer",
    "fieldCategories",
    "categoriesFieldContainer",
    "fieldDates",
    "datesFieldContainer",
    "fieldLocation",
    "locationFieldContainer",
    "fieldAges",
    "fieldPrices",
    "pricesFieldContainer",
    "buttonsFieldContainer",
    "eventSelector",
    "featuredImageFieldContainer"
  ],

  headerFilled: ["headerFilled", "headerFilledTitle"],
  headerFilledTitle: ["headerFilledTitle"],
  fieldTitle: ["fieldTitle", "titleFieldContainer"],
  titleFieldContainer: ["titleFieldContainer"],
  fieldDescription: ["fieldDescription", "descriptionFieldContainer"],
  descriptionFieldContainer: ["descriptionFieldContainer"],
  fieldCategories: ["fieldCategories", "categoriesFieldContainer"],
  categoriesFieldContainer: ["categoriesFieldContainer"],
  fieldDates: ["fieldDates", "datesFieldContainer"],
  datesFieldContainer: ["datesFieldContainer"],
  fieldLocation: ["fieldLocation", "locationFieldContainer"],
  locationFieldContainer: ["locationFieldContainer"],
  fieldAges: ["fieldAges"],
  fieldPrices: ["fieldPrices", "pricesFieldContainer"],
  pricesFieldContainer: ["pricesFieldContainer"],
  buttonsFieldContainer: ["buttonsFieldContainer", "eventSelector"],
  eventSelector: ["eventSelector"],
  featuredImageFieldContainer: ["featuredImageFieldContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerFilled: "div";
  headerFilledTitle: "div";
  fieldTitle: "div";
  titleFieldContainer: typeof FieldContainer;
  fieldDescription: "div";
  descriptionFieldContainer: typeof FieldContainer;
  fieldCategories: "div";
  categoriesFieldContainer: typeof FieldContainer;
  fieldDates: "div";
  datesFieldContainer: typeof FieldContainer;
  fieldLocation: "div";
  locationFieldContainer: typeof FieldContainer;
  fieldAges: "div";
  fieldPrices: "div";
  pricesFieldContainer: typeof FieldContainer;
  buttonsFieldContainer: "div";
  eventSelector: typeof EventSelector;
  featuredImageFieldContainer: typeof FieldContainer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRawEventPage__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRawEventPage__VariantsArgs;
    args?: PlasmicRawEventPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRawEventPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRawEventPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicRawEventPage__ArgProps,
      internalVariantPropNames: PlasmicRawEventPage__VariantProps
    });

    return PlasmicRawEventPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRawEventPage";
  } else {
    func.displayName = `PlasmicRawEventPage.${nodeName}`;
  }
  return func;
}

export const PlasmicRawEventPage = Object.assign(
  // Top-level PlasmicRawEventPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerFilled: makeNodeComponent("headerFilled"),
    headerFilledTitle: makeNodeComponent("headerFilledTitle"),
    fieldTitle: makeNodeComponent("fieldTitle"),
    titleFieldContainer: makeNodeComponent("titleFieldContainer"),
    fieldDescription: makeNodeComponent("fieldDescription"),
    descriptionFieldContainer: makeNodeComponent("descriptionFieldContainer"),
    fieldCategories: makeNodeComponent("fieldCategories"),
    categoriesFieldContainer: makeNodeComponent("categoriesFieldContainer"),
    fieldDates: makeNodeComponent("fieldDates"),
    datesFieldContainer: makeNodeComponent("datesFieldContainer"),
    fieldLocation: makeNodeComponent("fieldLocation"),
    locationFieldContainer: makeNodeComponent("locationFieldContainer"),
    fieldAges: makeNodeComponent("fieldAges"),
    fieldPrices: makeNodeComponent("fieldPrices"),
    pricesFieldContainer: makeNodeComponent("pricesFieldContainer"),
    buttonsFieldContainer: makeNodeComponent("buttonsFieldContainer"),
    eventSelector: makeNodeComponent("eventSelector"),
    featuredImageFieldContainer: makeNodeComponent(
      "featuredImageFieldContainer"
    ),

    // Metadata about props expected for PlasmicRawEventPage
    internalVariantProps: PlasmicRawEventPage__VariantProps,
    internalArgProps: PlasmicRawEventPage__ArgProps
  }
);

export default PlasmicRawEventPage;
/* prettier-ignore-end */
